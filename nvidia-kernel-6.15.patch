diff -Naur a/kernel/Kbuild b/kernel/Kbuild
--- a/kernel/Kbuild	2025-04-16 21:38:55.685168174 +0200
+++ b/kernel/Kbuild	2025-04-16 21:40:20.657364914 +0200
@@ -75,21 +75,15 @@
  $(eval include $(src)/$(_module)/$(_module).Kbuild))
 
 
-#
-# Define CFLAGS that apply to all the NVIDIA kernel modules. EXTRA_CFLAGS
-# is deprecated since 2.6.24 in favor of ccflags-y, but we need to support
-# older kernels which do not have ccflags-y. Newer kernels append
-# $(EXTRA_CFLAGS) to ccflags-y for compatibility.
-#
-
-EXTRA_CFLAGS += -I$(src)/common/inc
-EXTRA_CFLAGS += -I$(src)
-EXTRA_CFLAGS += -Wall $(DEFINES) $(INCLUDES) -Wno-cast-qual -Wno-format-extra-args
-EXTRA_CFLAGS += -D__KERNEL__ -DMODULE -DNVRM
-EXTRA_CFLAGS += -DNV_VERSION_STRING=\"575.51.02\"
+ccflags-y += -std=gnu17
+ccflags-y += -I$(src)/common/inc
+ccflags-y += -I$(src)
+ccflags-y += -Wall $(DEFINES) $(INCLUDES) -Wno-cast-qual -Wno-format-extra-args
+ccflags-y += -D__KERNEL__ -DMODULE -DNVRM
+ccflags-y += -DNV_VERSION_STRING=\"575.51.02\"
 
 ifneq ($(SYSSRCHOST1X),)
- EXTRA_CFLAGS += -I$(SYSSRCHOST1X)
+ ccflags-y += -I$(SYSSRCHOST1X)
 endif
 
 # Some Android kernels prohibit driver use of filesystem functions like
@@ -99,57 +93,57 @@
 PLATFORM_IS_ANDROID ?= 0
 
 ifeq ($(PLATFORM_IS_ANDROID),1)
- EXTRA_CFLAGS += -DNV_FILESYSTEM_ACCESS_AVAILABLE=0
+ ccflags-y += -DNV_FILESYSTEM_ACCESS_AVAILABLE=0
 else
- EXTRA_CFLAGS += -DNV_FILESYSTEM_ACCESS_AVAILABLE=1
+ ccflags-y += -DNV_FILESYSTEM_ACCESS_AVAILABLE=1
 endif
 
-EXTRA_CFLAGS += -Wno-unused-function
+ccflags-y += -Wno-unused-function
 
 ifneq ($(NV_BUILD_TYPE),debug)
- EXTRA_CFLAGS += -Wuninitialized
+ ccflags-y += -Wuninitialized
 endif
 
-EXTRA_CFLAGS += -fno-strict-aliasing
+ccflags-y += -fno-strict-aliasing
 
 ifeq ($(ARCH),arm64)
- EXTRA_CFLAGS += -mstrict-align
+ ccflags-y += -mstrict-align
 endif
 
 ifeq ($(NV_BUILD_TYPE),debug)
- EXTRA_CFLAGS += -g
+ ccflags-y += -g
 endif
 
-EXTRA_CFLAGS += -ffreestanding
+ccflags-y += -ffreestanding
 
 ifeq ($(ARCH),arm64)
- EXTRA_CFLAGS += -mgeneral-regs-only -march=armv8-a
- EXTRA_CFLAGS += $(call cc-option,-mno-outline-atomics,)
+ ccflags-y += -mgeneral-regs-only -march=armv8-a
+ ccflags-y += $(call cc-option,-mno-outline-atomics,)
 endif
 
 ifeq ($(ARCH),x86_64)
- EXTRA_CFLAGS += -mno-red-zone -mcmodel=kernel
+ ccflags-y += -mno-red-zone -mcmodel=kernel
 endif
 
 ifeq ($(ARCH),powerpc)
- EXTRA_CFLAGS += -mlittle-endian -mno-strict-align
+ ccflags-y += -mlittle-endian -mno-strict-align
 endif
 
-EXTRA_CFLAGS += -DNV_UVM_ENABLE
-EXTRA_CFLAGS += $(call cc-option,-Werror=undef,)
-EXTRA_CFLAGS += -DNV_SPECTRE_V2=$(NV_SPECTRE_V2)
-EXTRA_CFLAGS += -DNV_KERNEL_INTERFACE_LAYER
+ccflags-y += -DNV_UVM_ENABLE
+ccflags-y += $(call cc-option,-Werror=undef,)
+ccflags-y += -DNV_SPECTRE_V2=$(NV_SPECTRE_V2)
+ccflags-y += -DNV_KERNEL_INTERFACE_LAYER
 
 #
 # Detect SGI UV systems and apply system-specific optimizations.
 #
 
 ifneq ($(wildcard /proc/sgi_uv),)
- EXTRA_CFLAGS += -DNV_CONFIG_X86_UV
+ ccflags-y += -DNV_CONFIG_X86_UV
 endif
 
 ifdef VGX_FORCE_VFIO_PCI_CORE
- EXTRA_CFLAGS += -DNV_VGPU_FORCE_VFIO_PCI_CORE
+ ccflags-y += -DNV_VGPU_FORCE_VFIO_PCI_CORE
 endif
 
 WARNINGS_AS_ERRORS ?=
@@ -183,7 +177,7 @@
 
 NV_CFLAGS_FROM_CONFTEST := $(shell $(NV_CONFTEST_CMD) build_cflags)
 
-NV_CONFTEST_CFLAGS = $(NV_CFLAGS_FROM_CONFTEST) $(EXTRA_CFLAGS) -fno-pie
+NV_CONFTEST_CFLAGS = $(NV_CFLAGS_FROM_CONFTEST) $(ccflags-y) -fno-pie
 NV_CONFTEST_CFLAGS += $(call cc-disable-warning,pointer-sign)
 NV_CONFTEST_CFLAGS += $(call cc-option,-fshort-wchar,)
 NV_CONFTEST_CFLAGS += $(call cc-option,-Werror=incompatible-pointer-types,)
diff -uNrp a/kernel/nvidia/nv.c b/kernel/nvidia/nv.c
--- a/kernel/nvidia/nv.c	2025-03-14 13:58:05.000000000 +0000
+++ b/kernel/nvidia/nv.c	2025-04-19 12:17:18.343595216 +0100
@@ -21,6 +21,7 @@
  * DEALINGS IN THE SOFTWARE.
  */
 
+#include <linux/version.h>
 #include <linux/module.h>  // for MODULE_FIRMWARE
 
 // must precede "nv.h" and "nv-firmware.h" includes
@@ -4096,7 +4097,11 @@ int NV_API_CALL nv_stop_rc_timer(
 
     nv_printf(NV_DBG_INFO, "NVRM: stopping rc timer\n");
     nv->rc_timer_enabled = 0;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 15, 0)
     del_timer_sync(&nvl->rc_timer.kernel_timer);
+#else
+    timer_delete_sync(&nvl->rc_timer.kernel_timer);
+#endif
     nv_printf(NV_DBG_INFO, "NVRM: rc timer stopped\n");
 
     return 0;
@@ -4140,7 +4145,11 @@ void NV_API_CALL nv_stop_snapshot_timer(
     NV_SPIN_UNLOCK_IRQRESTORE(&nvl->snapshot_timer_lock, flags);
 
     if (timer_active)
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 15, 0)
         del_timer_sync(&nvl->snapshot_timer.kernel_timer);
+#else
+        timer_delete_sync(&nvl->snapshot_timer.kernel_timer);
+#endif
 }
 
 void NV_API_CALL nv_flush_snapshot_timer(void)
diff -uNrp a/kernel/nvidia/nv-nano-timer.c b/kernel/nvidia/nv-nano-timer.c
--- a/kernel/nvidia/nv-nano-timer.c	2025-03-14 13:58:06.000000000 +0000
+++ b/kernel/nvidia/nv-nano-timer.c	2025-04-19 12:25:24.516272621 +0100
@@ -23,6 +23,7 @@
 
 #define  __NO_VERSION__
 
+#include <linux/version.h>
 #include <linux/kernel.h> // For container_of
 #include <linux/hrtimer.h>
 #include <linux/ktime.h>
@@ -203,7 +204,11 @@ void NV_API_CALL nv_cancel_nano_timer(
 #if NV_NANO_TIMER_USE_HRTIMER
     hrtimer_cancel(&nv_nstimer->hr_timer);
 #else
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 15, 0)
     del_timer_sync(&nv_nstimer->jiffy_timer);
+#else
+    timer_delete_sync(&nv_nstimer->jiffy_timer);
+#endif
 #endif
 
 }
diff -uNrp a/kernel/nvidia-drm/nvidia-drm-os-interface.c b/kernel/nvidia-drm/nvidia-drm-os-interface.c
--- a/kernel/nvidia-drm/nvidia-drm-os-interface.c	2025-03-14 12:46:27.000000000 +0000
+++ b/kernel/nvidia-drm/nvidia-drm-os-interface.c	2025-04-19 12:43:14.060610358 +0100
@@ -20,6 +20,7 @@
  * DEALINGS IN THE SOFTWARE.
  */
 
+#include <linux/version.h>
 #include <linux/slab.h>
 
 #include "nvidia-drm-os-interface.h"
@@ -238,7 +239,11 @@ unsigned long nv_drm_timeout_from_ms(NvU
 
 bool nv_drm_del_timer_sync(nv_drm_timer *timer)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 15, 0)
     if (del_timer_sync(&timer->kernel_timer)) {
+#else
+    if (timer_delete_sync(&timer->kernel_timer)) {
+#endif
         return true;
     } else {
         return false;
diff -uNrp a/kernel/nvidia-modeset/nvidia-modeset-linux.c b/kernel/nvidia-modeset/nvidia-modeset-linux.c
--- a/kernel/nvidia-modeset/nvidia-modeset-linux.c	2025-03-14 12:43:00.000000000 +0000
+++ b/kernel/nvidia-modeset/nvidia-modeset-linux.c	2025-04-19 12:32:13.460624253 +0100
@@ -21,6 +21,7 @@
  * DEALINGS IN THE SOFTWARE.
  */
 
+#include <linux/version.h>
 #include <linux/module.h>
 #include <linux/kernel.h>
 #include <linux/slab.h>
@@ -738,7 +739,11 @@ static void nvkms_kthread_q_callback(voi
      * pending timers and than waiting for workqueue callbacks.
      */
     if (timer->kernel_timer_created) {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 15, 0)
         del_timer_sync(&timer->kernel_timer);
+#else
+        timer_delete_sync(&timer->kernel_timer);
+#endif
     }
 
     /*
@@ -1922,7 +1927,11 @@ restart:
              * completion, and we wait for queue completion with
              * nv_kthread_q_stop below.
              */
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 15, 0)
             if (del_timer_sync(&timer->kernel_timer) == 1) {
+#else
+            if (timer_delete_sync(&timer->kernel_timer) == 1) {
+#endif
                 /*  We've deactivated timer so we need to clean after it */
                 list_del(&timer->timers_list);
 
